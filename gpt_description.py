import random

# This is a MOCKED AI description generator.
# It simulates a call to GPT/Gemini to avoid needing an API key for the demo.
def generate_product_info(product_name: str, language: str = "en"):
    """
    Mocks the generation of a product description and category suggestion.
    """
    print(f"ЁЯдЦ Mock AI: Generating description for '{product_name}' in language '{language}'.")

    # Mocked data
    categories = ["Spices", "Vegetables", "Grains", "Handicrafts", "Snacks"]
    
    descriptions = {
        "en": [
            f"High-quality, freshly sourced {product_name}. Perfect for daily use and adds authentic flavor to your dishes. hygienically packed.",
            f"Introducing our premium {product_name}, sourced directly from local farms. It's 100% natural and free from preservatives.",
            f"Get the best value with our {product_name}. Ideal for households and restaurants looking for quality and affordability."
        ],
        "hi": [
            f"рдЙрдЪреНрдЪ рдЧреБрдгрд╡рддреНрддрд╛ рд╡рд╛рд▓рд╛, рддрд╛рдЬрд╝рд╛ {product_name}ред рджреИрдирд┐рдХ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╣реА рдФрд░ рдЖрдкрдХреЗ рд╡реНрдпрдВрдЬрдиреЛрдВ рдореЗрдВ рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рд╕реНрд╡рд╛рдж рдЬреЛрдбрд╝рддрд╛ рд╣реИред рд╕реНрд╡рдЪреНрдЫ рд░реВрдк рд╕реЗ рдкреИрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ред",
            f"рдкреЗрд╢ рд╣реИ рд╣рдорд╛рд░рд╛ рдкреНрд░реАрдорд┐рдпрдо {product_name}, рд╕реАрдзреЗ рд╕реНрдерд╛рдиреАрдп рдЦреЗрддреЛрдВ рд╕реЗ рдкреНрд░рд╛рдкреНрддред рдпрд╣ 100% рдкреНрд░рд╛рдХреГрддрд┐рдХ рдФрд░ рдкрд░рд┐рд░рдХреНрд╖рдХреЛрдВ рд╕реЗ рдореБрдХреНрдд рд╣реИред",
            f"рд╣рдорд╛рд░реЗ {product_name} рдХреЗ рд╕рд╛рде рд╕рд░реНрд╡реЛрддреНрддрдо рдореВрд▓реНрдп рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред рдЧреБрдгрд╡рддреНрддрд╛ рдФрд░ рд╕рд╛рдорд░реНрдереНрдп рдХреА рддрд▓рд╛рд╢ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдШрд░реЛрдВ рдФрд░ рд░реЗрд╕реНрддрд░рд╛рдВ рдХреЗ рд▓рд┐рдП рдЖрджрд░реНрд╢ред"
        ],
        "ta": [
            f"роЙропро░рпНродро░, р░др░╛р░Ьр░╛р░Чр░╛ рокрпЖро▒рокрпНрокроЯрпНроЯ {product_name}. родро┐ройроЪро░ро┐ рокропройрпНрокро╛роЯрпНроЯро┐ро▒рпНроХрпБ роПро▒рпНро▒родрпБ рооро▒рпНро▒рпБроорпН роЙроЩрпНроХро│рпН роЙрогро╡рпБроХро│рпБроХрпНроХрпБ роЙрогрпНроорпИропро╛рой роЪрпБро╡рпИропрпИ роЪрпЗро░рпНроХрпНроХро┐ро▒родрпБ. роЪрпБроХро╛родро╛ро░рооро╛рой роорпБро▒рпИропро┐ро▓рпН роиро┐ро░роорпНрокро┐ропрпБро│рпНро│родрпБ.",
            f"роОроЩрпНроХро│рпН рокро┐ро░рпАрооро┐ропроорпН {product_name} роР роЕро▒ро┐роорпБроХрокрпНрокроЯрпБродрпНродрпБроХро┐ро▒рпЛроорпН, роЗродрпБ роЙро│рпНро│рпВро░рпН рокрогрпНрогрпИроХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ роирпЗро░роЯро┐ропро╛роХрокрпН рокрпЖро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ. роЗродрпБ 100% роЗропро▒рпНроХрпИропро╛ройродрпБ рооро▒рпНро▒рпБроорпН рокродрокрпНрокроЯрпБродрпНродро┐роХро│рпН роЗро▓рпНро▓ро╛родродрпБ.",
        ],
         "te": [
            f"р░Ер░зр░┐р░Х-р░ир░╛р░гр▒Нр░пр░д, р░др░╛р░Ьр░╛р░Чр░╛ р░ор▒Вр░▓р░В р░Ър▒Зр░пр░мр░бр░┐р░и {product_name}. р░░р▒Лр░Ьр▒Бр░╡р░╛р░░р▒А р░Йр░кр░пр▒Лр░Чр░В р░Хр▒Лр░╕р░В р░кр░░р▒Нр░лр▒Жр░Хр▒Нр░Яр▒Н р░ор░░р░┐р░пр▒Б р░ор▒А р░╡р░Вр░Яр░Хр░╛р░▓р░Хр▒Б р░кр▒Нр░░р░╛р░ор░╛р░гр░┐р░Хр░ор▒Ир░и р░░р▒Бр░Ър░┐р░ир░┐ р░Ьр▒Лр░бр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░кр░░р░┐р░╢р▒Бр░нр▒Нр░░р░Вр░Чр░╛ р░кр▒Нр░пр░╛р░Хр▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐.",
            f"р░ор░╛ р░кр▒Нр░░р▒Ар░ор░┐р░пр░В {product_name}р░ир░┐ р░кр░░р░┐р░Ър░пр░В р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ор▒Б, р░Зр░жр░┐ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░кр▒Кр░▓р░╛р░▓ р░ир▒Бр░Вр░бр░┐ р░ир▒Зр░░р▒Бр░Чр░╛ р░др▒Ар░╕р▒Бр░Хр▒Лр░мр░бр░┐р░Вр░жр░┐. р░Зр░жр░┐ 100% р░╕р░╣р░Ьр░ор▒Ир░ир░жр░┐ р░ор░░р░┐р░пр▒Б р░╕р░Вр░░р░Хр▒Нр░╖р░гр░Хр░╛р░░р▒Бр░▓ р░ир▒Бр░Вр░бр░┐ р░Йр░Ър░┐р░др░В.",
        ],
         "bn": [
            f"ржЙржЪрзНржЪ-ржорж╛ржирзЗрж░, рждрж╛ржЬрж╛ржнрж╛ржмрзЗ ржЙрзОрж╕ ржХрж░рж╛ {product_name}ред ржжрзИржиржирзНржжрж┐ржи ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржкрж╛рж░ржлрзЗржХрзНржЯ ржПржмржВ ржЖржкржирж╛рж░ ржЦрж╛ржмрж╛рж░рзЗ ржЦрж╛ржБржЯрж┐ рж╕рзНржмрж╛ржж ржпрзЛржЧ ржХрж░рзЗред рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ржнрж╛ржмрзЗ ржкрзНржпрж╛ржХ ржХрж░рж╛ред",
            f"ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо {product_name} ржЙржкрж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, рж╕рж░рж╛рж╕рж░рж┐ рж╕рзНржерж╛ржирзАржпрж╝ ржЦрж╛ржорж╛рж░ ржерзЗржХрзЗ рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛ред ржПржЯрж┐ 100% ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржПржмржВ ржкрзНрж░рж┐ржЬрж╛рж░ржнрзЗржЯрж┐ржн ржорзБржХрзНрждред",
        ],
    }
    
    # Select a random description based on language, default to English
    lang_descriptions = descriptions.get(language, descriptions["en"])
    
    response = {
        "description": random.choice(lang_descriptions),
        "category_suggestion": random.choice(categories)
    }
    
    return response

# --- REAL GEMINI/GPT IMPLEMENTATION (for reference) ---
# import google.generativeai as genai
# import os

# def generate_product_info_real(product_name: str, language: str = "en"):
#     """
#     Uses a real LLM (like Google's Gemini) to generate a description.
#     """
#     # Configure the API key
#     # genai.configure(api_key=os.environ["GEMINI_API_KEY"])
#     # model = genai.GenerativeModel('gemini-1.5-flash')
    
#     prompt = f"""
#     You are an expert copywriter for rural Indian sellers.
#     Given the product name "{product_name}", do the following:
#     1. Write a short, appealing, and simple product description in the specified language code: {language}.
#     2. Suggest the best single category for this product from this list: ["Spices", "Vegetables", "Grains", "Handicrafts", "Snacks", "Dairy", "Oils"].
    
#     Return the output as a JSON object with two keys: "description" and "category_suggestion".
#     For example: {{"description": "Your generated description here.", "category_suggestion": "Spices"}}
#     """
    
#     # response = model.generate_content(prompt)
#     # return json.loads(response.text)
    
#     # This is a mocked response for the real function placeholder
#     return generate_product_info(product_name, language)